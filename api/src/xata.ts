// Generated by Xata Codegen 0.29.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "group",
    columns: [
      { name: "messages", type: "json", notNull: true, defaultValue: "[{}]" },
      {
        name: "name",
        type: "string",
        notNull: true,
        defaultValue: "New Group",
      },
      {
        name: "devices",
        type: "json",
        notNull: true,
        defaultValue: '{\n  "client": [],\n  "server": []\n}',
      },
      { name: "assignedUser", type: "link", link: { table: "user" } },
    ],
    revLinks: [
      { column: "assignedGroup", table: "clientDevice" },
      { column: "assignedGroup", table: "serverDevice" },
    ],
  },
  {
    name: "clientDevice",
    columns: [
      { name: "name", type: "string" },
      { name: "messages", type: "json", notNull: true, defaultValue: "[{}]" },
      { name: "assignedGroup", type: "link", link: { table: "group" } },
      { name: "assignedUser", type: "link", link: { table: "user" } },
    ],
  },
  {
    name: "serverDevice",
    columns: [
      { name: "name", type: "string" },
      { name: "messages", type: "json", notNull: true, defaultValue: "[{}]" },
      { name: "assignedGroup", type: "link", link: { table: "group" } },
      { name: "assignedUser", type: "link", link: { table: "user" } },
    ],
  },
  {
    name: "message",
    columns: [
      { name: "from", type: "string" },
      { name: "to", type: "string" },
      { name: "content", type: "text" },
      { name: "status", type: "int" },
      {
        name: "fromDeviceType",
        type: "string",
        notNull: true,
        defaultValue: "server",
      },
    ],
  },
  {
    name: "user",
    columns: [
      { name: "password", type: "string", defaultValue: "" },
      { name: "username", type: "string", unique: true },
    ],
    revLinks: [
      { column: "assignedUser", table: "group" },
      { column: "assignedUser", table: "clientDevice" },
      { column: "assignedUser", table: "serverDevice" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Group = InferredTypes["group"];
export type GroupRecord = Group & XataRecord;

export type ClientDevice = InferredTypes["clientDevice"];
export type ClientDeviceRecord = ClientDevice & XataRecord;

export type ServerDevice = InferredTypes["serverDevice"];
export type ServerDeviceRecord = ServerDevice & XataRecord;

export type Message = InferredTypes["message"];
export type MessageRecord = Message & XataRecord;

export type User = InferredTypes["user"];
export type UserRecord = User & XataRecord;

export type DatabaseSchema = {
  group: GroupRecord;
  clientDevice: ClientDeviceRecord;
  serverDevice: ServerDeviceRecord;
  message: MessageRecord;
  user: UserRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://SPARK-7cmp99.us-east-1.xata.sh/db/SPARK-API",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
