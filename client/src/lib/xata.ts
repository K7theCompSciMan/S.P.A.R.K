// Generated by Xata Codegen 0.29.1. Please do not edit.
import { buildClient } from '@xata.io/client';
import type { BaseClientOptions, SchemaInference, XataRecord } from '@xata.io/client';

const tables = [
	{
		name: 'group',
		columns: [
			{
				name: 'name',
				type: 'string',
				notNull: true,
				defaultValue: 'New Group'
			},
			{
				name: 'devices',
				type: 'json',
				notNull: true,
				defaultValue: '{\n  "client": [],\n  "server": []\n}'
			},
			{ name: 'assignedUser', type: 'link', link: { table: 'user' } },
			{ name: 'messages', type: 'json', notNull: true, defaultValue: '[]' },
			{
				name: 'groupCommands',
				type: 'json',
				notNull: true,
				defaultValue: '[]'
			},
			{
				name: 'aiMessages',
				type: 'json',
				notNull: true,
				defaultValue:
					"[\n  {\n    \"role\": \"system\",\n    \"content\": \"You are SPARK, an AI designed to assist the user in managing their devices. When the user gives any input, you are to respond with an appropriate answer. For example, if the user asks, 'What is the weather today?', you are to respond with the weather forecast for the day. If the user gives a command, such as 'launch chrome on my laptop' you must determine if the device is part of the user's device group. The input text will contain the devices in the group in the form of 'user command | client devices | server devices' where 'user command'  is the command given by the user, 'client devices' is a list of the group's client devices and 'server devices' is a list of the group's server devices. Both 'client devices' and 'server devices' will be listed as an array of device objects. Each device object will contain a name property and a commands property. The commands property will be an array of commands which contain an alias and a command property. The alias property is a string that the user can use to refer to the command and the command property is the actual command. If the user's command is a command that can be run on the device the user specifies, you are to return [RUN COMMAND ON DEVICE: <device_name>] <command_alias> where <device_name> is the name of the device and <command_alias> is the alias of the command. If the user's command is not a command that can be run on the device the user specifies, you are to return 'I'm sorry, I cannot run that command on the device you specified.' or text along that line.\"\n  }\n]"
			},
			{ name: 'settings', type: 'json', notNull: true, defaultValue: '{}' }
		],
		revLinks: [
			{ column: 'assignedGroup', table: 'clientDevice' },
			{ column: 'assignedGroup', table: 'serverDevice' }
		]
	},
	{
		name: 'clientDevice',
		columns: [
			{ name: 'name', type: 'string' },
			{ name: 'messages', type: 'json', notNull: true, defaultValue: '[{}]' },
			{ name: 'assignedGroup', type: 'link', link: { table: 'group' } },
			{ name: 'assignedUser', type: 'link', link: { table: 'user' } },
			{
				name: 'deviceCommands',
				type: 'json',
				notNull: true,
				defaultValue: '[]'
			},
			{ name: 'settings', type: 'json', notNull: true, defaultValue: '{}' }
		]
	},
	{
		name: 'serverDevice',
		columns: [
			{ name: 'name', type: 'string' },
			{ name: 'messages', type: 'json', notNull: true, defaultValue: '[{}]' },
			{ name: 'assignedGroup', type: 'link', link: { table: 'group' } },
			{ name: 'assignedUser', type: 'link', link: { table: 'user' } },
			{
				name: 'deviceCommands',
				type: 'json',
				notNull: true,
				defaultValue: '[]'
			},
			{ name: 'settings', type: 'json', notNull: true, defaultValue: '{}' }
		]
	},
	{
		name: 'message',
		columns: [
			{ name: 'from', type: 'string' },
			{ name: 'to', type: 'string' },
			{ name: 'content', type: 'text' },
			{
				name: 'fromDeviceType',
				type: 'string',
				notNull: true,
				defaultValue: 'server'
			},
			{ name: 'status', type: 'int', notNull: true, defaultValue: '0' }
		]
	},
	{
		name: 'user',
		columns: [
			{ name: 'password', type: 'string', defaultValue: '' },
			{ name: 'username', type: 'string', unique: true },
			{
				name: 'settings',
				type: 'json',
				notNull: true,
				defaultValue: '{\r\n    "primaryCommunicationMethod": "nats"\r\n}'
			}
		],
		revLinks: [
			{ column: 'assignedUser', table: 'group' },
			{ column: 'assignedUser', table: 'clientDevice' },
			{ column: 'assignedUser', table: 'serverDevice' }
		]
	}
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Group = InferredTypes['group'];
export type GroupRecord = Group & XataRecord;

export type ClientDevice = InferredTypes['clientDevice'];
export type ClientDeviceRecord = ClientDevice & XataRecord;

export type ServerDevice = InferredTypes['serverDevice'];
export type ServerDeviceRecord = ServerDevice & XataRecord;

export type Message = InferredTypes['message'];
export type MessageRecord = Message & XataRecord;

export type User = InferredTypes['user'];
export type UserRecord = User & XataRecord;

export type DatabaseSchema = {
	group: GroupRecord;
	clientDevice: ClientDeviceRecord;
	serverDevice: ServerDeviceRecord;
	message: MessageRecord;
	user: UserRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
	databaseURL: 'https://SPARK-7cmp99.us-east-1.xata.sh/db/SPARK-API'
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
	constructor(options?: BaseClientOptions) {
		super({ ...defaultOptions, ...options }, tables);
	}
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
	if (instance) return instance;

	instance = new XataClient();
	return instance;
};
